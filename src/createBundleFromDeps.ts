import { extname, parse, join } from 'path';
import { getShimsForModule } from './requireConfig';
import {
    wrapTextModule,
    isNamedAMD,
    isAMDWithDefine,
    wrapShimmedModule,
    wrapNonShimmedModule,
    renameModule,
} from './transformAMD';
import { readFile } from './fsPromises';
import { MagentoRequireConfig } from './types';
import MagicString, { Bundle } from 'magic-string';
import { createRequireResolver } from './createRequireResolver';

/**
 * @summary Create a bundle file (compatible with the RequireJS runtime)
 *          from a collection of module IDs
 */
export async function createBundleFromDeps(
    bundleName: string,
    deps: string[],
    baseDir: string,
    requireConfig: MagentoRequireConfig,
    themeID: string,
) {
    const resolver = createRequireResolver(requireConfig);
    const transformedModules = await Promise.all(
        deps.map(d =>
            getFinalModuleSource(d, baseDir, resolver, requireConfig),
        ),
    );
    const { bundle, depsWithInvalidShims } = createBundle(transformedModules);
    if (depsWithInvalidShims) {
        // TODO: surface in CLI at end of run
    }

    const bundleFilename = `${parse(bundleName).name}.js`;
    const sourcemap = bundle.generateMap({
        source: bundleFilename,
        includeContent: true,
        hires: true,
    });

    return {
        bundleFilename,
        bundle: bundle.toString(),
        map: sourcemap.toString(),
    };
}

async function getFinalModuleSource(
    dep: string,
    baseDir: string,
    resolver: ReturnType<typeof createRequireResolver>,
    requireConfig: MagentoRequireConfig,
) {
    const resolvedDep = resolver(dep);
    const path = join(baseDir, resolvedDep.modulePath);
    const source = await readFile(path, 'utf8');
    const isText = resolvedDep.pluginID === 'text';
    const shims = getShimsForModule(dep, requireConfig);
    const hasDefine = isAMDWithDefine(source);
    const isNamed = isNamedAMD(source);
    const hasInvalidShim = hasDefine && !!shims;

    if (isText) {
        return { dep, file: wrapTextModule(dep, source), hasInvalidShim };
    }

    if (isNamed) {
        return { dep, file: new MagicString(source), hasInvalidShim };
    }

    if (!hasDefine) {
        if (shims) {
            return {
                dep,
                file: wrapShimmedModule(dep, source, shims),
                hasInvalidShim,
            };
        }

        if (!shims) {
            return {
                dep,
                file: wrapNonShimmedModule(dep, source),
                hasInvalidShim,
            };
        }
    }

    return { dep, file: renameModule(dep, source), hasInvalidShim };
}

function createBundle(
    modules: { dep: string; file: MagicString; hasInvalidShim: boolean }[],
) {
    const bundle = new Bundle();
    const depsWithInvalidShims: string[] = [];

    bundle.prepend(
        `/* Generated by @magento/baler - ${new Date().toISOString()} */\n\n`,
    );

    for (const { dep, file, hasInvalidShim } of modules) {
        bundle.addSource({
            filename: `../${dep}.js`,
            content: file,
        });
        if (hasInvalidShim) depsWithInvalidShims.push(dep);
    }

    return { bundle, depsWithInvalidShims };
}
